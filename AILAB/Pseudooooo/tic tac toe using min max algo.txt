TIC TAC TOE USING MIN MAX ALGORITHM

Consider the given presets:

move: move to be played
b[3][3]: board, arr[9[]: board
max: computer, min: player

step 1:
choose whether the player starts or computer starts

step 2:
if player_move:
	player may choose any one of the valid moves

if comp_move:
	best_val=-1000
	for(i=0);i<5;i++)
		for(j=0;j<5;j++)
			if(b[i][j]=='')
				b[i][j]=move
				mov_val=minmax(board,ismax)
				if(move_val>best_val)
					b[i][j]=''
					comp plays mov_val
					best_val=mov=val

step 3:
for(player)
	if(win_con==1)
		print(player wins)
		goto step 6

for(comp)
	if(win_con==1)
		print(computer wins)
		goto step 6

step 4:
repeat steps 2,3 while(board!=full)

step 5:
if(board==full)
	print(game draw)

step 6:
end

minmax:
	score=heuristic(board)
	if(score==10)
		return score
	if(score==-10)
		return score
	if(ismax)
		best=-1000
		for(i=0;i<5;i++)
			for(j=0;j<5;j++)
				if(b[i][j]=='')
					b[i][j]=move
					best=max(best,minmax(board,!ismax))
					b[i][j]=''
		return best
	else
		best=1000
		for(i=0;i<5;i++)
			for(j=0;j<5;j++)
				if(b[i][j]=='')
					b[i][j]=move
					best=min(best,minmax(board,!ismax))
					b[i][j]=''
		return best

///

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

#define SIZE 3

char board[SIZE][SIZE]; // Tic Tac Toe board

// Function to check for a win
bool checkWin(char player) {
    // Check rows
    for (int i = 0; i < SIZE; i++) {
        if (board[i][0] == player && board[i][1] == player && board[i][2] == player) {
            return true;
        }
    }

    // Check columns
    for (int i = 0; i < SIZE; i++) {
        if (board[0][i] == player && board[1][i] == player && board[2][i] == player) {
            return true;
        }
    }

    // Check diagonals
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
        return true;
    }

    if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
        return true;
    }

    return false;
}

// Function to evaluate the board
int evaluateBoard() {
    if (checkWin('X')) {
        return 10; // Computer wins
    }
    else if (checkWin('O')) {
        return -10; // Player wins
    }
    else {
        return 0; // Draw
    }
}

// Function to perform the minimax algorithm
int minimax(bool isMax) {
    int score = evaluateBoard();

    // Base cases
    if (score == 10) {
        return score;
    }
    else if (score == -10) {
        return score;
    }
    else if (boardIsFull()) {
        return 0;
    }

    if (isMax) {
        int best = -1000;

        // Traverse all cells
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] == '_') {
                    board[i][j] = 'X'; // Computer's move
                    best = max(best, minimax(!isMax));
                    board[i][j] = '_'; // Undo the move
                }
            }
        }

        return best;
    }
    else {
        int best = 1000;

        // Traverse all cells
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] == '_') {
                    board[i][j] = 'O'; // Player's move
                    best = min(best, minimax(!isMax));
                    board[i][j] = '_'; // Undo the move
                }
            }
        }

        return best;
    }
}

// Function to find the best move for the computer
void findBestMove() {
    int bestVal = -1000;
    int bestMoveRow = -1;
    int bestMoveCol = -1;

    // Traverse all cells
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (board[i][j] == '_') {
                board[i][j] = 'X'; // Computer's move
                int moveVal = minimax(false);
                board
